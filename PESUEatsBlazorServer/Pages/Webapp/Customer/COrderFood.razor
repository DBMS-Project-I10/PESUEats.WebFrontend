@page "/app/customer/orderfood"
@attribute [Authorize(Roles = "customer")]

@using PESUEatsBlazorServer.JSONBodyFormats.app.customer
@using PESUEatsBlazorServer.JSONBodyFormats.app.restaurant
@using PESUEatsBlazorServer.JSONBodyFormats.app.shared
@inject PESUEatsBlazorServer.Services.PESUEatsWebAPIService PESUEatsWebAPI
@inject IDialogService DialogService
@inject NavigationManager navMan

<PageTitle>Order Food</PageTitle>
<h3>Order Food</h3>

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Secondary" @ref="tabs">
    <MudTabPanel Text="Select Restaurant" ToolTip="Select a restaurant">
        <MudTable Items="@restaurants" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Cuisine</MudTh>
                <MudTh>Location</MudTh>
                @*<MudTh>email</MudTh>*@
                <MudTh>Rating</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="RName">@context.name</MudTd>
                <MudTd DataLabel="RCuisine">@context.cuisine</MudTd>
                <MudTd DataLabel="RLocation">@context.location</MudTd>
                @*<MudTd DataLabel="Remail">@context.email</MudTd>*@
                <MudTd DataLabel="RRating">@context.rating</MudTd>
                <MudTd DataLabel="RSelection">
                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" 
                    OnClick="@(() => SelectRestaurant(@context.id))" Icon="@Icons.Material.Filled.SkipNext" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>

    <MudTabPanel Text="Select Items" ToolTip="Select the items you want to order">
        <MudText Typo="Typo.h4">@(selectedRestaurant != null ?
            $"Restaurant: {selectedRestaurant.name}" : "First select a restaurant")</MudText>

        <MudTable Items="@menuItems" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Category</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>
                    Quantity:
                    <MudNumericField @bind-Value="Quantity" Label="Filled" Variant="Variant.Text" Min="0" Max="10" />
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="RName">@context.Name</MudTd>
                <MudTd DataLabel="RCategory">@context.Category</MudTd>
                <MudTd DataLabel="RDescription">@context.Description</MudTd>
                <MudTd DataLabel="RPrice">@context.Price</MudTd>
                <MudTd DataLabel="RAddToCart">
                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" 
                    OnClick="@(() => AddToCart(@context.Id))" Icon="@Icons.Material.Filled.PlusOne" />
                </MudTd>
            </RowTemplate>
        </MudTable>
        
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FinalizeCart"
            EndIcon="@Icons.Material.Filled.SkipNext">Finalize Cart</MudButton>
    </MudTabPanel>

    <MudTabPanel Text="View Cart & Place Order" ToolTip="View your Cart and place your order">
        <MudTable Items="@cartItems" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="IName">@context.Name</MudTd>
                <MudTd DataLabel="IPrice">@context.Price</MudTd>
                <MudTd DataLabel="MIQuantity">@context.Quantity</MudTd>
                <MudTd DataLabel="Delete">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => RemoveFromCart(@context.id))"
                    EndIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PlaceOrder"
            EndIcon="@Icons.Material.Filled.SkipNext">Place Order</MudButton>
    </MudTabPanel>
</MudTabs>


@code {
    MudTabs tabs;
    public int Quantity { get; set; } = 1;

    private IEnumerable<RestaurantsJSONResponse200> restaurants = new List<RestaurantsJSONResponse200>();
    private IEnumerable<MenuItemsJSONResponse200>? menuItems = new List<MenuItemsJSONResponse200>();
    private IEnumerable<ShowCartJSONResponse200> cartItems = new List<ShowCartJSONResponse200>();

    private RestaurantsJSONResponse200? selectedRestaurant;

    [CascadingParameter]
    private string UserAuthToken { get; set; } = "";


    private async void RemoveFromCart(int Iid)
    {

        (bool, GetCartIdJSONResponse200?, string?) result =
            await PESUEatsWebAPI.GetActiveCartID(UserAuthToken);
        bool isSuccess = result.Item1;
        string? message = result.Item3;

        if (!isSuccess)
        {
            await DialogService.ShowMessageBox(
                "Warning",
                message??"",
                yesText:"OK"
            );
            StateHasChanged();
        }
        else
        {
            (bool, RemoveFromCartJSONResponse200?, string?) result2 =
                await PESUEatsWebAPI.RemoveFromCart(UserAuthToken, new RemoveFromCartJSONRequest(Iid, result.Item2.Cartid));
            bool isSuccess2 = result.Item1;
            string? message2 = result.Item3;

            if (!isSuccess2)
            {
                await DialogService.ShowMessageBox(
                    "Warning",
                    message2??"",
                    yesText:"OK"
                );
                StateHasChanged();
            }
            else
            {
                await DialogService.ShowMessageBox(
                    "Success",
                    "Deleted from cart",
                    yesText: "close"
                );
                StateHasChanged();
                await FinalizeCart();
                StateHasChanged();
            }
        }
    }


    private async void AddToCart(int Iid)
    {
        (bool, GetCartIdJSONResponse200?, string?) result =
            await PESUEatsWebAPI.GetActiveCartID(UserAuthToken);
        bool isSuccess = result.Item1;
        string? message = result.Item3;

        if (!isSuccess)
        {
            await DialogService.ShowMessageBox(
                "Warning",
                message??"",
                yesText:"OK"
            );
            StateHasChanged();
        }
        else
        {
            (bool, AddToCartJSONResponse200?, string?) result2 =
                await PESUEatsWebAPI.AddToCart(UserAuthToken, new AddToCartJSONRequest(Iid, result.Item2.Cartid, Quantity));
            bool isSuccess2 = result2.Item1;
            string? message2 = result2.Item3;

            if (!isSuccess2)
            {
                await DialogService.ShowMessageBox(
                    "Warning",
                    message2??"",
                    yesText:"OK"
                );
                StateHasChanged();
            }
            else
            {
                await DialogService.ShowMessageBox(
                    "Success",
                    "Added to cart",
                    yesText: "close"
                );
                StateHasChanged();
            }
        }
    }

    private async void PlaceOrder()
    {
        (bool, GetCartIdJSONResponse200?, string?) result =
            await PESUEatsWebAPI.GetActiveCartID(UserAuthToken);
        bool isSuccess = result.Item1;
        string? message = result.Item3;

        if (!isSuccess)
        {
            await DialogService.ShowMessageBox(
                "Warning",
                message??"",
                yesText:"OK"
            );
            StateHasChanged();
        }
        else
        {
            (bool, PlaceOrderJSONResponse200?, string?) result2 =
                await PESUEatsWebAPI.PlaceOrder(UserAuthToken, new PlaceOrderJSONRequest(result.Item2.Cartid));
            bool isSuccess2 = result2.Item1;
            string? message2 = result2.Item3;

            if (!isSuccess2)
            {
                await DialogService.ShowMessageBox(
                    "Warning",
                    message2??"",
                    yesText:"OK"
                );
                StateHasChanged();
            }
            else
            {
                await DialogService.ShowMessageBox(
                    "Success",
                    "Your order has been placed",
                    yesText: "close"
                );
                StateHasChanged();
                navMan.NavigateTo("/app/customer/myorder");
            }
        }
    }

    private async Task FinalizeCart()
    {
        (bool, GetCartIdJSONResponse200?, string?) result =
            await PESUEatsWebAPI.GetActiveCartID(UserAuthToken);
        bool isSuccess = result.Item1;
        string? message = result.Item3;

        if (!isSuccess)
        {
            await DialogService.ShowMessageBox(
                "Warning",
                message??"",
                yesText:"OK"
            );
            StateHasChanged();
        }
        else
        {
            await SetCartItemsList(result.Item2.Cartid);
        }
    }

    private async Task SetCartItemsList(int cartId)
    {
        (bool, List<ShowCartJSONResponse200>?, string?) result = await PESUEatsWebAPI.ShowCart(UserAuthToken, cartId);

        bool success = result.Item1;
        List<ShowCartJSONResponse200> _menuItems = result.Item2 ?? new List<ShowCartJSONResponse200>();
        string errorMessage = result.Item3 ?? "";

        if (success)
        {
            cartItems = _menuItems;
            StateHasChanged();
            tabs.ActivatePanel(2);
        }
        else
        {
            await DialogService.ShowMessageBox(
                "Warning", 
                errorMessage,
                yesText:"close"
            );
            StateHasChanged();
        }
    }

    private async void SelectRestaurant(int Rid)
    {
        selectedRestaurant = restaurants.Where(r => r.id == Rid).FirstOrDefault();
        if (selectedRestaurant != null)
        {
            menuItems = null;
            (bool, CreateNewCartJSONResponse200?, string?) result = 
                await PESUEatsWebAPI.CreateNewCart(UserAuthToken);

            bool success = result.Item1;
            string errorMessage = result.Item3 ?? "";

            if (success)
            {
                await SetItemsList(Rid);
                StateHasChanged();
                tabs.ActivatePanel(1);
            }
            else
            {
                await DialogService.ShowMessageBox(
                    "Warning", 
                    errorMessage,
                    yesText:"close"
                );
                StateHasChanged();
            }
        }
        else
        {
            await DialogService.ShowMessageBox(
                "Warning", 
                "selectedRestaurant is null. Why?",
                yesText:"close"
            );
            StateHasChanged();
        }
    }
    
    private async Task SetItemsList(int Rid)
    {
        (bool, List<MenuItemsJSONResponse200>?, string?) result = await PESUEatsWebAPI.GetMenuItemsAsync(UserAuthToken, Rid);

        bool success = result.Item1;
        List<MenuItemsJSONResponse200> _menuItems = result.Item2 ?? new List<MenuItemsJSONResponse200>();
        string errorMessage = result.Item3 ?? "";

        if (success)
        {
            menuItems = _menuItems;
            StateHasChanged();
        }
        else
        {
            await DialogService.ShowMessageBox(
                "Warning", 
                errorMessage,
                yesText:"close"
            );
            StateHasChanged();
        }
    }

    protected override async void OnInitialized()
    {
        await SetRestaurantsList();
    }

    private async Task SetRestaurantsList()
    {
        (bool, List<RestaurantsJSONResponse200>?, string?) result = await PESUEatsWebAPI.GetRestaurantsAsync(UserAuthToken);

        bool success = result.Item1;
        List<RestaurantsJSONResponse200> _restaurants = result.Item2 ?? new List<RestaurantsJSONResponse200>();
        string errorMessage = result.Item3 ?? "";

        if (success)
        {
            restaurants = _restaurants;
            StateHasChanged();
        }
        else
        {
            await DialogService.ShowMessageBox(
                "Warning", 
                errorMessage,
                yesText:"close"
            );
            StateHasChanged();
        }
    }
}
