@page "/signup"

@inject PESUEatsBlazorServer.Services.PESUEatsWebAPIService PESUEatsWebAPI
@inject IDialogService DialogService

<h3>Signup</h3>

<AuthorizeView>
    <Authorized>
        You are currently signed in. Sign out in order to signup.
    </Authorized>
    <NotAuthorized>
        <MudTextField T="string" Counter="UsernameMaxCharLimit" @bind-Value="Username"
        HelperText="Enter your user ID" Label="Username" Variant="Variant.Text" Immediate="true"
        Validation="@(new Func<string, IEnumerable<string>>(UsernameMaxCharCheck))" />
        <MudTextField @bind-Value="Password" Label="Password" Variant="Variant.Text" 
        InputType="@PasswordInput" Adornment="Adornment.End"
        AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="passwordViewToggle" />
        <MudTextField @bind-Value="PasswordConfirm" Label="Confirm Password" Variant="Variant.Text" 
        InputType="@PasswordInput" Adornment="Adornment.End"
        AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="passwordViewToggle" />
        <MudText>Select which type of account you want</MudText>
        <MudForm>
            <MudRadioGroup @bind-SelectedOption="@SelectedOption">
                <MudRadio Option="@("customer")">Customer</MudRadio>
                <MudRadio Option="@("restaurant")">Restaurant</MudRadio>
                <MudRadio Option="@("da")">Delivery agent</MudRadio>
            </MudRadioGroup>
        </MudForm>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TrySingup"
        EndIcon="@Icons.Material.Filled.PlusOne">Signup</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string Password { get; set;} = "123";
    public string PasswordConfirm { get; set;} = "123";
    public string Username { get; set;} = "tta";
    const int UsernameMaxCharLimit = 15;
    public string SelectedOption { get; set; } = "customer";

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async void TrySingup()
    {
        if (Password != PasswordConfirm)
        {
            await DialogService.ShowMessageBox(
            "Warning", 
            "The passwords don't match!", cancelText:"close");
            StateHasChanged();
        }
        else
        {
            List<User>? users = await PESUEatsWebAPI.GetUsersAsync(null);
            if (users.Where(u => u.username.ToLower() == Username.ToLower()).FirstOrDefault() != null)
            {
                await DialogService.ShowMessageBox(
                "Warning",
                "The user already exists. Try another username!", cancelText:"close");
                StateHasChanged();
            }
            else
            {
                bool success = await PESUEatsWebAPI.Signup(new User(Username, Password, new[] {SelectedOption}));
                if (success)
                {
                    await DialogService.ShowMessageBox(
                    "Success",
                    "You have been signed up! Click 'close' and go to login", yesText: "close");
                    StateHasChanged();
                }
                else
                {
                    await DialogService.ShowMessageBox(
                    "Failed",
                    "There was some failure. Sorry :(", cancelText: "close");
                    StateHasChanged();
                }
            }
        }
    }

    void passwordViewToggle()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> UsernameMaxCharCheck(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && ch?.Length > UsernameMaxCharLimit)
            yield return "Max 25 characters";
    }
}
