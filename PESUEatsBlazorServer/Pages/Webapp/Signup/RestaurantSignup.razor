<h3>Restaurant Signup</h3>

@using PESUEatsBlazorServer.JSONBodyFormats.signup

@inject PESUEatsBlazorServer.Services.PESUEatsWebAPIService PESUEatsWebAPI
@inject IDialogService DialogService
@inject NavigationManager navMan

<MudForm>
    <MudTextField T="string" @bind-Value="Name" Required="true"
        HelperText="Enter your Name" Label="Name" Variant="Variant.Text" Immediate="true" />
    <MudTextField T="string" Counter="EmailMaxCharLimit" @bind-Value="Email" Required="true"
        HelperText="Enter your email ID" Label="Email" Variant="Variant.Text" Immediate="true"
        Validation="@(new Func<string, IEnumerable<string>>(UsernameMaxCharCheck))" />
    <MudTextField @bind-Value="Password" Label="Password" Variant="Variant.Text" 
        InputType="@PasswordInput" Adornment="Adornment.End" Required="true"
        AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="passwordViewToggle" />
    <MudTextField @bind-Value="PasswordConfirm" Label="Confirm Password" Variant="Variant.Text" 
        InputType="@PasswordInput" Adornment="Adornment.End" Required="true"
        AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="passwordViewToggle" />
    <MudTextField T="string" @bind-Value="Location" Required="true"
        HelperText="Enter your Location. e.g.;12.9716 N, 77.5946 E" Label="Location" Variant="Variant.Text" Immediate="true"/>
    <MudTextField T="string" @bind-Value="Cuisine" Required="false"
        HelperText="Enter the cuisine. e.g.: Indian" Label="Cuisine" Variant="Variant.Text" Immediate="true" />
</MudForm>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TrySingup"
    EndIcon="@Icons.Material.Filled.Login">Signup</MudButton>

@code {
    public string Name { get; set; } = "Indy";
    public string Email { get; set;} = "1@r.com";
    public string Password { get; set;} = "";
    public string PasswordConfirm { get; set;} = "";
    public string Location { get; set;} = "12.9716 N, 77.5946 E";
    public string Cuisine { get; set;} = "Indian";

    const int EmailMaxCharLimit = 256;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async void TrySingup()
    {
        if (Password != PasswordConfirm)
        {
            await DialogService.ShowMessageBox(
                "Warning", 
                "The passwords don't match!",
                yesText:"OK"
            );
            StateHasChanged();
        }
        else
        {
            RestaurantJSONRequest restaurant = new(Name, Email, Password, Location, Cuisine);

            (bool, string) result = await PESUEatsWebAPI.SignupRestaurantAsync(restaurant);
            bool isSuccess = result.Item1;
            string message = result.Item2;

            if (!isSuccess)
            {
                await DialogService.ShowMessageBox(
                    "Warning",
                    message,
                    yesText:"OK"
                );
                StateHasChanged();
            }
            else
            {
                await DialogService.ShowMessageBox(
                "Success",
                message,
                yesText: "close");
                StateHasChanged();
                navMan.NavigateTo("/signin", false);
            }
        }
    }

    void passwordViewToggle()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> UsernameMaxCharCheck(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && ch?.Length > EmailMaxCharLimit)
            yield return "Max 25 characters";
    }
}
